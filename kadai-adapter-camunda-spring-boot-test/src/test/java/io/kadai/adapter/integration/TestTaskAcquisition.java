package io.kadai.adapter.integration;

import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.MatcherAssert.assertThat;

import io.kadai.adapter.manager.AdapterManager;
import io.kadai.adapter.systemconnector.api.SystemConnector;
import io.kadai.adapter.systemconnector.camunda.api.impl.CamundaSystemConnectorImpl;
import io.kadai.adapter.systemconnector.camunda.config.CamundaSystemUrls;
import io.kadai.adapter.test.KadaiAdapterTestApplication;
import io.kadai.common.internal.util.Pair;
import io.kadai.common.test.security.JaasExtension;
import io.kadai.common.test.security.WithAccessId;
import io.kadai.task.api.TaskCustomIntField;
import io.kadai.task.api.exceptions.TaskNotFoundException;
import io.kadai.task.api.models.Task;
import io.kadai.task.api.models.TaskSummary;
import io.kadai.workbasket.api.exceptions.NotAuthorizedOnWorkbasketException;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;
import java.util.stream.Stream;
import org.assertj.core.api.Assertions;
import org.camunda.bpm.engine.impl.calendar.DateTimeUtil;
import org.junit.jupiter.api.DynamicTest;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestFactory;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.jupiter.api.function.ThrowingConsumer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.test.context.ContextConfiguration;
import uk.co.datumedge.hamcrest.json.SameJSONAs;

/** Test class to test the conversion of tasks generated by Camunda BPM to Kadai tasks. */
@SpringBootTest(
    classes = KadaiAdapterTestApplication.class,
    webEnvironment = WebEnvironment.DEFINED_PORT)
@AutoConfigureWebTestClient
@ExtendWith(JaasExtension.class)
@ContextConfiguration
@SuppressWarnings("checkstyle:LineLength")
class TestTaskAcquisition extends AbsIntegrationTest {

  private static final Logger LOGGER = LoggerFactory.getLogger(TestTaskAcquisition.class);
  @Autowired AdapterManager adapterManager;

  @Value("${kadai-system-connector-camundaSystemURLs}")
  private String configuredSystemConnectorUrls;

  @WithAccessId(
      user = "teamlead_1",
      groups = {"taskadmin"})
  @Test
  void
      should_CreateKadaiTasksWithVariablesInCustomAttributes_When_StartCamundaTaskWithTheseComplexVariables()
          throws Exception {

    String processInstanceId =
        this.camundaProcessengineRequester.startCamundaProcessAndReturnId(
            "simple_user_task_with_complex_variables_process", "");
    List<String> camundaTaskIds =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);

    Thread.sleep((long) (this.adapterTaskPollingInterval * 1.2));

    String expectedComplexProcessVariable =
        "{\"type\":\"object\","
            + "\"value\":\""
            + "{\\\"stringField\\\":\\\"\\\\fForm feed \\\\b Backspace \\\\t Tab"
            + " \\\\\\\\Backslash \\\\n newLine \\\\r Carriage return \\\\\\\" DoubleQuote\\\","
            + "\\\"intField\\\":1,\\\"doubleField\\\":1.1,\\\"booleanField\\\":false,"
            + "\\\"processVariableTestObjectTwoField\\\":["
            + "{\\\"stringFieldObjectTwo\\\":\\\"stringValueObjectTwo\\\","
            + "\\\"intFieldObjectTwo\\\":2,\\\"doubleFieldObjectTwo\\\":2.2,"
            + "\\\"booleanFieldObjectTwo\\\":true,"
            + "\\\"dateFieldObjectTwo\\\":\\\"1970-01-01 13:12:11\\\"}]}\","
            + "\"valueInfo\":{\"objectTypeName\":\"io.kadai.impl.ProcessVariableTestObject\","
            + "\"serializationDataFormat\":\"application/json\"}}";

    String expectedPrimitiveProcessVariable1 =
        "{\"type\":\"integer\",\"value\":5," + "\"valueInfo\":null}";

    String expectedPrimitiveProcessVariable2 =
        "{\"type\":\"boolean\",\"value\":true," + "\"valueInfo\":null}";

    camundaTaskIds.forEach(
        camundaTaskId -> {
          Map<String, String> customAttributes =
              retrieveCustomAttributesFromNewKadaiTask(camundaTaskId);

          assertThat(
              expectedComplexProcessVariable,
              SameJSONAs.sameJSONAs(customAttributes.get("camunda:attribute1")));
          assertThat(
              expectedPrimitiveProcessVariable1,
              SameJSONAs.sameJSONAs(customAttributes.get("camunda:attribute2")));
          assertThat(
              expectedPrimitiveProcessVariable2,
              SameJSONAs.sameJSONAs(customAttributes.get("camunda:attribute3")));
        });
  }

  @WithAccessId(
      user = "teamlead_1",
      groups = {"taskadmin"})
  @Test
  void should_CreateKadaiTask_When_StartUserTaskProcessInstanceInCamunda() throws Exception {

    String processInstanceId =
        this.camundaProcessengineRequester.startCamundaProcessAndReturnId(
            "simple_user_task_process", "");
    List<String> camundaTaskIds =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);

    Thread.sleep((long) (this.adapterTaskPollingInterval * 1.2));

    for (String camundaTaskId : camundaTaskIds) {
      List<TaskSummary> kadaiTasks =
          this.taskService.createTaskQuery().externalIdIn(camundaTaskId).list();
      assertThat(kadaiTasks).hasSize(1);
      TaskSummary kadaiTaskSummary = kadaiTasks.get(0);
      String kadaiTaskExternalId = kadaiTaskSummary.getExternalId();
      assertThat(kadaiTaskExternalId).isEqualTo(camundaTaskId);
      String businessProcessId = kadaiTaskSummary.getBusinessProcessId();
      assertThat(processInstanceId).isEqualTo(businessProcessId);
    }
  }

  @WithAccessId(
      user = "teamlead_1",
      groups = {"taskadmin"})
  @Test
  void
      should_CreateKadaiTask_When_StartUserTaskProcessInstanceWithEmptyExtensionPropertyInCamunda()
          throws Exception {

    String processInstanceId =
        this.camundaProcessengineRequester.startCamundaProcessAndReturnId(
            "simple_user_task_process_with_empty_extension_property", "");
    List<String> camundaTaskIds =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);

    Thread.sleep((long) (this.adapterTaskPollingInterval * 1.2));

    for (String camundaTaskId : camundaTaskIds) {
      List<TaskSummary> kadaiTasks =
          this.taskService.createTaskQuery().externalIdIn(camundaTaskId).list();
      assertThat(kadaiTasks).hasSize(1);
      TaskSummary kadaiTaskSummary = kadaiTasks.get(0);
      String kadaiTaskExternalId = kadaiTaskSummary.getExternalId();
      assertThat(kadaiTaskExternalId).isEqualTo(camundaTaskId);
      String businessProcessId = kadaiTaskSummary.getBusinessProcessId();
      assertThat(processInstanceId).isEqualTo(businessProcessId);
    }

    String expectedComplexProcessVariable =
        "{\"type\":\"object\","
            + "\"value\":\""
            + "{\\\"stringField\\\":\\\"\\\\fForm feed \\\\b Backspace \\\\t Tab"
            + " \\\\\\\\Backslash \\\\n newLine \\\\r Carriage return \\\\\\\" DoubleQuote\\\","
            + "\\\"intField\\\":1,\\\"doubleField\\\":1.1,\\\"booleanField\\\":false,"
            + "\\\"processVariableTestObjectTwoField\\\":["
            + "{\\\"stringFieldObjectTwo\\\":\\\"stringValueObjectTwo\\\","
            + "\\\"intFieldObjectTwo\\\":2,\\\"doubleFieldObjectTwo\\\":2.2,"
            + "\\\"booleanFieldObjectTwo\\\":true,"
            + "\\\"dateFieldObjectTwo\\\":\\\"1970-01-01 13:12:11\\\"}]}\","
            + "\"valueInfo\":{\"objectTypeName\":\"io.kadai.impl.ProcessVariableTestObject\","
            + "\"serializationDataFormat\":\"application/json\"}}";

    String expectedPrimitiveProcessVariable1 =
        "{\"type\":\"integer\",\"value\":5," + "\"valueInfo\":null}";

    String expectedPrimitiveProcessVariable2 =
        "{\"type\":\"boolean\",\"value\":true," + "\"valueInfo\":null}";

    camundaTaskIds.forEach(
        camundaTaskId -> {
          Map<String, String> customAttributes =
              retrieveCustomAttributesFromNewKadaiTask(camundaTaskId);

          assertThat(
              expectedComplexProcessVariable,
              SameJSONAs.sameJSONAs(customAttributes.get("camunda:attribute1")));
          assertThat(
              expectedPrimitiveProcessVariable1,
              SameJSONAs.sameJSONAs(customAttributes.get("camunda:attribute2")));
          assertThat(
              expectedPrimitiveProcessVariable2,
              SameJSONAs.sameJSONAs(customAttributes.get("camunda:attribute3")));
        });
  }

  @WithAccessId(
      user = "teamlead_1",
      groups = {"taskadmin"})
  @Test
  void should_CreateMultipleKadaiTasks_When_StartMultipleUserTaskProcessInstanceInCamunda()
      throws Exception {

    int numberOfProcesses = 10;
    List<List<String>> camundaTaskIdsList = new ArrayList<>();
    for (int i = 0; i < numberOfProcesses; i++) {
      String processInstanceId =
          this.camundaProcessengineRequester.startCamundaProcessAndReturnId(
              "simple_user_task_process", "");
      camundaTaskIdsList.add(
          this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId));
    }
    Thread.sleep((long) (this.adapterTaskPollingInterval * 1.2));

    for (List<String> camundaTaskIds : camundaTaskIdsList) {
      for (String camundaTaskId : camundaTaskIds) {
        List<TaskSummary> kadaiTasks =
            this.taskService.createTaskQuery().externalIdIn(camundaTaskId).list();
        assertThat(kadaiTasks).hasSize(1);
        String kadaiTaskExternalId = kadaiTasks.get(0).getExternalId();
        assertThat(kadaiTaskExternalId).isEqualTo(camundaTaskId);
      }
    }
  }

  @WithAccessId(
      user = "teamlead_1",
      groups = {"taskadmin"})
  @Test
  void should_CreateKadaiTask_When_StartCamundaTaskWithPrimitiveVariables() throws Exception {

    String variables =
        "\"variables\": {\"amount\": {\"value\":555, "
            + "\"type\":\"long\"},\"item\": {\"value\": \"item-xyz\"}}";
    String processInstanceId =
        this.camundaProcessengineRequester.startCamundaProcessAndReturnId(
            "simple_user_task_process", variables);
    List<String> camundaTaskIds =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);

    Thread.sleep((long) (this.adapterTaskPollingInterval * 1.2));

    String expectedPrimitiveVariable1 = "{\"type\":\"long\",\"value\":555,\"valueInfo\":null}";

    String expectedPrimitiveVariable2 =
        "{\"type\":\"string\",\"value\":\"item-xyz\",\"valueInfo\":null}";

    camundaTaskIds.forEach(
        camundaTaskId -> {
          Map<String, String> customAttributes =
              retrieveCustomAttributesFromNewKadaiTask(camundaTaskId);
          assertThat(
              expectedPrimitiveVariable1,
              SameJSONAs.sameJSONAs(customAttributes.get("camunda:amount")));
          assertThat(
              expectedPrimitiveVariable2,
              SameJSONAs.sameJSONAs(customAttributes.get("camunda:item")));
        });
  }

  @WithAccessId(
      user = "teamlead_1",
      groups = {"taskadmin"})
  @Test
  void should_CreateKadaiTaskWithManualPriority_When_StartCamundaTaskWithThisManualPriority()
      throws Exception {

    String variables =
        "\"variables\": {\"kadai.manual-priority\": {\"value\":\"555\", "
            + "\"type\":\"string\"}}";
    String processInstanceId =
        this.camundaProcessengineRequester.startCamundaProcessAndReturnId(
            "simple_user_task_process", variables);
    List<String> camundaTaskIds =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);

    Thread.sleep((long) (this.adapterTaskPollingInterval * 1.2));

    TaskSummary kadaiTask =
        taskService.createTaskQuery().externalIdIn(camundaTaskIds.get(0)).single();

    assertThat(kadaiTask.getManualPriority()).isEqualTo(555);
  }

  @WithAccessId(
      user = "teamlead_1",
      groups = {"taskadmin"})
  @Test
  void
      should_CreateKadaiTaskWithDefaultManualPriority_When_StartCamundaTaskWithoutManualPriority()
          throws Exception {

    String processInstanceId =
        this.camundaProcessengineRequester.startCamundaProcessAndReturnId(
            "simple_user_task_process", "");
    List<String> camundaTaskIds =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);

    Thread.sleep((long) (this.adapterTaskPollingInterval * 1.2));

    TaskSummary kadaiTask =
        taskService.createTaskQuery().externalIdIn(camundaTaskIds.get(0)).single();

    assertThat(kadaiTask.getManualPriority()).isEqualTo(-1);
  }

  @WithAccessId(
      user = "teamlead_1",
      groups = {"taskadmin"})
  @Test
  void should_SetCustomIntegersInKadaiTask_When_CamundaTaskHasCustomIntegers() throws Exception {
    String variables =
        "\"variables\": {"
            + "\"kadai.custom-int-1\": {\"value\":\"1\", \"type\":\"string\"},"
            + "\"kadai.custom-int-2\": {\"value\":\"2\", \"type\":\"string\"},"
            + "\"kadai.custom-int-3\": {\"value\":\"3\", \"type\":\"string\"},"
            + "\"kadai.custom-int-4\": {\"value\":\"4\", \"type\":\"string\"},"
            + "\"kadai.custom-int-5\": {\"value\":\"5\", \"type\":\"string\"},"
            + "\"kadai.custom-int-6\": {\"value\":\"6\", \"type\":\"string\"},"
            + "\"kadai.custom-int-7\": {\"value\":\"7\", \"type\":\"string\"},"
            + "\"kadai.custom-int-8\": {\"value\":\"8\", \"type\":\"string\"}"
            + "}";
    String processInstanceId =
        this.camundaProcessengineRequester.startCamundaProcessAndReturnId(
            "simple_user_task_process", variables);
    List<String> camundaTaskIds =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);

    Thread.sleep((long) (this.adapterTaskPollingInterval * 1.2));

    TaskSummary kadaiTask =
        taskService.createTaskQuery().externalIdIn(camundaTaskIds.get(0)).single();

    assertThat(kadaiTask.getCustomIntField(TaskCustomIntField.CUSTOM_INT_1)).isOne();
    assertThat(kadaiTask.getCustomIntField(TaskCustomIntField.CUSTOM_INT_2)).isEqualTo(2);
    assertThat(kadaiTask.getCustomIntField(TaskCustomIntField.CUSTOM_INT_3)).isEqualTo(3);
    assertThat(kadaiTask.getCustomIntField(TaskCustomIntField.CUSTOM_INT_4)).isEqualTo(4);
    assertThat(kadaiTask.getCustomIntField(TaskCustomIntField.CUSTOM_INT_5)).isEqualTo(5);
    assertThat(kadaiTask.getCustomIntField(TaskCustomIntField.CUSTOM_INT_6)).isEqualTo(6);
    assertThat(kadaiTask.getCustomIntField(TaskCustomIntField.CUSTOM_INT_7)).isEqualTo(7);
    assertThat(kadaiTask.getCustomIntField(TaskCustomIntField.CUSTOM_INT_8)).isEqualTo(8);
  }

  @WithAccessId(
      user = "teamlead_1",
      groups = {"taskadmin"})
  @Test
  void should_SetDefaultCustomIntegerInKadaiTask_When_CamundaTaskHasDefaultCustomInteger()
      throws Exception {

    String processInstanceId =
        this.camundaProcessengineRequester.startCamundaProcessAndReturnId(
            "simple_user_task_process", "");
    List<String> camundaTaskIds =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);

    Thread.sleep((long) (this.adapterTaskPollingInterval * 1.2));

    TaskSummary kadaiTask =
        taskService.createTaskQuery().externalIdIn(camundaTaskIds.get(0)).single();

    assertThat(kadaiTask.getCustomIntField(TaskCustomIntField.CUSTOM_INT_1)).isNull();
    assertThat(kadaiTask.getCustomIntField(TaskCustomIntField.CUSTOM_INT_2)).isNull();
    assertThat(kadaiTask.getCustomIntField(TaskCustomIntField.CUSTOM_INT_3)).isNull();
    assertThat(kadaiTask.getCustomIntField(TaskCustomIntField.CUSTOM_INT_4)).isNull();
    assertThat(kadaiTask.getCustomIntField(TaskCustomIntField.CUSTOM_INT_5)).isNull();
    assertThat(kadaiTask.getCustomIntField(TaskCustomIntField.CUSTOM_INT_6)).isNull();
    assertThat(kadaiTask.getCustomIntField(TaskCustomIntField.CUSTOM_INT_7)).isNull();
    assertThat(kadaiTask.getCustomIntField(TaskCustomIntField.CUSTOM_INT_8)).isNull();
  }

  @WithAccessId(
      user = "teamlead_1",
      groups = {"taskadmin"})
  @Test
  void
      should_CreateKadaiTaskWithComplexVariablesInCustomAttributes_When_StartCamundaTaskWithTheseVariables()
          throws Exception {

    String processInstanceId =
        this.camundaProcessengineRequester.startCamundaProcessAndReturnId(
            "simple_user_task_with_big_complex_variables_process", "");
    List<String> camundaTaskIds =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);

    Thread.sleep((long) (this.adapterTaskPollingInterval * 1.2));

    List<TaskSummary> kadaiTasks =
        this.taskService.createTaskQuery().externalIdIn(camundaTaskIds.get(0)).list();
    assertThat(kadaiTasks).hasSize(1);

    TaskSummary kadaiTaskSummary = kadaiTasks.get(0);
    String kadaiTaskExternalId = kadaiTaskSummary.getExternalId();
    assertThat(kadaiTaskExternalId).isEqualTo(camundaTaskIds.get(0));

    Task kadaiTask = this.taskService.getTask(kadaiTaskSummary.getId());
    Map<String, String> kadaiTaskCustomAttributes = kadaiTask.getCustomAttributeMap();
    String variablesKeyString = "camunda:attribute1";
    String kadaiVariablesString = kadaiTaskCustomAttributes.get(variablesKeyString);

    assertThat(kadaiVariablesString).hasSizeGreaterThan(1_500_000);
  }

  @WithAccessId(
      user = "teamlead_1",
      groups = {"taskadmin"})
  @Test
  void
      should_CreateKadaiTasksWithComplexVariablesInCustomAttributes_When_ParentExecutionOfCamundaTasksStarted()
          throws Exception {

    String processInstanceId =
        this.camundaProcessengineRequester.startCamundaProcessAndReturnId(
            "simple_multiple_user_tasks_with_complex_variables_process", "");

    List<String> camundaTaskIds =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);

    Thread.sleep(this.adapterTaskPollingInterval);

    assertThat(camundaTaskIds).hasSize(3);

    // complete first 3 parallel tasks, one of which starts another task after completion that will
    // be checked for the process variables
    camundaTaskIds.forEach(
        camundaTaskId -> this.camundaProcessengineRequester.completeTaskWithId(camundaTaskId));

    camundaTaskIds =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);

    assertThat(camundaTaskIds).hasSize(1);

    Thread.sleep(this.adapterTaskPollingInterval);

    String expectedComplexProcessVariable =
        "{\"type\":\"object\","
            + "\"value\":\""
            + "{\\\"stringField\\\":\\\"\\\\fForm feed \\\\b Backspace \\\\t Tab"
            + " \\\\\\\\Backslash \\\\n newLine \\\\r Carriage return \\\\\\\" DoubleQuote\\\","
            + "\\\"intField\\\":1,\\\"doubleField\\\":1.1,\\\"booleanField\\\":false,"
            + "\\\"processVariableTestObjectTwoField\\\":["
            + "{\\\"stringFieldObjectTwo\\\":\\\"stringValueObjectTwo\\\","
            + "\\\"intFieldObjectTwo\\\":2,\\\"doubleFieldObjectTwo\\\":2.2,"
            + "\\\"booleanFieldObjectTwo\\\":true,"
            + "\\\"dateFieldObjectTwo\\\":\\\"1970-01-01 13:12:11\\\"}]}\","
            + "\"valueInfo\":{\"objectTypeName\":\"io.kadai.impl.ProcessVariableTestObject\","
            + "\"serializationDataFormat\":\"application/json\"}}";

    String expectedPrimitiveProcessVariable1 =
        "{\"type\":\"integer\",\"value\":5," + "\"valueInfo\":null}";

    String expectedPrimitiveProcessVariable2 =
        "{\"type\":\"boolean\",\"value\":true," + "\"valueInfo\":null}";
    camundaTaskIds.forEach(
        camundaTaskId -> {
          Map<String, String> customAttributes =
              retrieveCustomAttributesFromNewKadaiTask(camundaTaskId);

          assertThat(
              expectedComplexProcessVariable,
              SameJSONAs.sameJSONAs(customAttributes.get("camunda:attribute1")));
          assertThat(
              expectedPrimitiveProcessVariable1,
              SameJSONAs.sameJSONAs(customAttributes.get("camunda:attribute2")));
          assertThat(
              expectedPrimitiveProcessVariable2,
              SameJSONAs.sameJSONAs(customAttributes.get("camunda:attribute3")));
        });
  }

  @WithAccessId(
      user = "teamlead_1",
      groups = {"taskadmin"})
  @Test
  void should_CreateMultipleKadaiTasks_When_StartProcessInstanceWithMultipleExecutionsInCamunda()
      throws Exception {

    String processInstanceId =
        this.camundaProcessengineRequester.startCamundaProcessAndReturnId(
            "simple_multiple_execution_process", "");
    List<String> camundaTaskIds =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);
    assertThat(camundaTaskIds).hasSize(3);

    Thread.sleep((long) (this.adapterTaskPollingInterval * 1.2));

    for (String camundaTaskId : camundaTaskIds) {
      List<TaskSummary> kadaiTasks =
          this.taskService.createTaskQuery().externalIdIn(camundaTaskId).list();
      assertThat(kadaiTasks).hasSize(1);
      String kadaiTaskExternalId = kadaiTasks.get(0).getExternalId();
      assertThat(kadaiTaskExternalId).isEqualTo(camundaTaskId);
    }
  }

  @WithAccessId(
      user = "teamlead_1",
      groups = {"taskadmin"})
  @Test
  void should_CreateKadaiTask_When_SystemConnectorHasCorrectSystemEngineIdentifier()
      throws Exception {

    final Map<String, SystemConnector> originalSystemConnectors =
        new HashMap<>(adapterManager.getSystemConnectors());

    setSystemConnector("default");

    String processInstanceId =
        this.camundaProcessengineRequester.startCamundaProcessAndReturnId(
            "simple_user_task_process", "");
    List<String> camundaTaskIds =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);

    Thread.sleep((long) (this.adapterTaskPollingInterval * 1.2));

    for (String camundaTaskId : camundaTaskIds) {
      List<TaskSummary> kadaiTasks =
          this.taskService.createTaskQuery().externalIdIn(camundaTaskId).list();
      assertThat(kadaiTasks).hasSize(1);
      TaskSummary kadaiTaskSummary = kadaiTasks.get(0);
      String kadaiTaskExternalId = kadaiTaskSummary.getExternalId();
      assertThat(kadaiTaskExternalId).isEqualTo(camundaTaskId);
      String businessProcessId = kadaiTaskSummary.getBusinessProcessId();
      assertThat(processInstanceId).isEqualTo(businessProcessId);
    }

    adapterManager.getSystemConnectors().clear();
    adapterManager.getSystemConnectors().putAll(originalSystemConnectors);
  }

  @WithAccessId(
      user = "teamlead_1",
      groups = {"taskadmin"})
  @Test
  void should_CreateKadaiTasksWithCorrectDomains_When_StartProcessWithDomainsInProcessVariables()
      throws Exception {
    String processInstanceId =
        this.camundaProcessengineRequester.startCamundaProcessAndReturnId(
            "simple_user_task_process_with_different_domains",
            "\"variables\": "
                + "{\"kadai.domain\": {\"value\":\"DOMAIN_B\", \"type\":\"string\"}}");
    List<String> camundaTaskIds =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);
    assertThat(camundaTaskIds).hasSize(3);
    Thread.sleep((long) (this.adapterTaskPollingInterval * 1.2));

    List<Pair<String, String>> variablesToTaskList =
        Arrays.asList(
            Pair.of("DOMAIN_B", camundaTaskIds.get(0)),
            Pair.of("DOMAIN_B", camundaTaskIds.get(1)),
            Pair.of("DOMAIN_B", camundaTaskIds.get(2)));

    for (Pair<String, String> variablesToTask : variablesToTaskList) {
      List<TaskSummary> kadaiTaskSummaryList =
          this.taskService.createTaskQuery().externalIdIn(variablesToTask.getRight()).list();
      assertThat(kadaiTaskSummaryList).hasSize(1);
      TaskSummary kadaiTaskSummary = kadaiTaskSummaryList.get(0);

      Task kadaiTask = taskService.getTask(kadaiTaskSummary.getId());
      assertThat(kadaiTask.getDomain()).isEqualTo(variablesToTask.getLeft());
    }

    this.camundaProcessengineRequester.completeTaskWithId(camundaTaskIds.get(2));
    camundaTaskIds =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);
    assertThat(camundaTaskIds).hasSize(3);
    Thread.sleep((long) (this.adapterTaskPollingInterval * 1.2));

    List<TaskSummary> kadaiTaskSummaryList =
        this.taskService.createTaskQuery().externalIdIn(camundaTaskIds.get(2)).list();
    assertThat(kadaiTaskSummaryList).hasSize(1);
    TaskSummary kadaiTaskSummary = kadaiTaskSummaryList.get(0);
    Task kadaiTask = taskService.getTask(kadaiTaskSummary.getId());
    assertThat(kadaiTask.getDomain()).isEqualTo("DOMAIN_B");
  }

  @WithAccessId(
      user = "teamlead_1",
      groups = {"taskadmin"})
  @Test
  void
      should_CreateKadaiTasksWithCorrectDomains_When_StartProcessWithDomainsInExtensionProperties()
          throws Exception {

    String processInstanceId =
        this.camundaProcessengineRequester.startCamundaProcessAndReturnId(
            "simple_user_task_process_with_different_domains", "");
    List<String> camundaTaskIds =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);
    assertThat(camundaTaskIds).hasSize(3);
    Thread.sleep((long) (this.adapterTaskPollingInterval * 1.2));

    List<Pair<String, String>> variablesToTaskList =
        Arrays.asList(
            Pair.of("DOMAIN_A", camundaTaskIds.get(0)),
            Pair.of("DOMAIN_A", camundaTaskIds.get(1)),
            Pair.of("DOMAIN_B", camundaTaskIds.get(2)));

    for (Pair<String, String> variablesToTask : variablesToTaskList) {
      List<TaskSummary> kadaiTaskSummaryList =
          this.taskService.createTaskQuery().externalIdIn(variablesToTask.getRight()).list();
      assertThat(kadaiTaskSummaryList).hasSize(1);
      TaskSummary kadaiTaskSummary = kadaiTaskSummaryList.get(0);

      Task kadaiTask = taskService.getTask(kadaiTaskSummary.getId());
      assertThat(kadaiTask.getDomain()).isEqualTo(variablesToTask.getLeft());
    }

    this.camundaProcessengineRequester.completeTaskWithId(camundaTaskIds.get(2));
    camundaTaskIds =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);
    assertThat(camundaTaskIds).hasSize(3);
    Thread.sleep((long) (this.adapterTaskPollingInterval * 1.2));

    List<TaskSummary> kadaiTaskSummaryList =
        this.taskService.createTaskQuery().externalIdIn(camundaTaskIds.get(2)).list();
    assertThat(kadaiTaskSummaryList).hasSize(1);
    TaskSummary kadaiTaskSummary = kadaiTaskSummaryList.get(0);
    Task kadaiTask = taskService.getTask(kadaiTaskSummary.getId());
    assertThat(kadaiTask.getDomain()).isEqualTo("DOMAIN_A");
  }

  @WithAccessId(
      user = "teamlead_1",
      groups = {"taskadmin"})
  @Test
  void should_NotCreateKadaiTask_When_SystemConnectorHasIncorrectSystemEngineIdentifier()
      throws Exception {

    final Map<String, SystemConnector> originalSystemConnectors =
        new HashMap<>(adapterManager.getSystemConnectors());

    setSystemConnector("wrongIdentifier");

    Assertions.assertThat(kadaiOutboxRequester.getAllEvents()).isEmpty();

    String processInstanceId =
        this.camundaProcessengineRequester.startCamundaProcessAndReturnId(
            "simple_user_task_process", "");
    List<String> camundaTaskIds =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);

    Assertions.assertThat(kadaiOutboxRequester.getAllEvents()).hasSize(1);

    Thread.sleep((this.adapterTaskPollingInterval * 2));

    for (String camundaTaskId : camundaTaskIds) {
      List<TaskSummary> kadaiTasks =
          this.taskService.createTaskQuery().externalIdIn(camundaTaskId).list();
      assertThat(kadaiTasks).isEmpty();
    }

    Assertions.assertThat(kadaiOutboxRequester.getAllEvents()).hasSize(1);

    adapterManager.getSystemConnectors().clear();
    adapterManager.getSystemConnectors().putAll(originalSystemConnectors);
  }

  @WithAccessId(
      user = "teamlead_1",
      groups = {"taskadmin"})
  @Test
  void
      should_CreateKadaiTasksWithVariablesInCustomAttributes_When_StartProcessWithTheseDifferentVariablesInCamunda()
          throws Exception {

    String processInstanceId =
        this.camundaProcessengineRequester.startCamundaProcessAndReturnId(
            "simple_user_task_process_with_multiple_tasks_and_complex_variables", "");
    List<String> camundaTaskIds =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);
    assertThat(camundaTaskIds).hasSize(3);
    Thread.sleep((long) (this.adapterTaskPollingInterval * 1.2));

    List<Pair<List<String>, String>> variablesToTaskList =
        Arrays.asList(
            Pair.of(Collections.singletonList("camunda:attribute1"), camundaTaskIds.get(0)),
            Pair.of(
                Arrays.asList("camunda:attribute1", "camunda:attribute2"), camundaTaskIds.get(1)),
            Pair.of(
                Arrays.asList("camunda:attribute1", "camunda:attribute2", "camunda:attribute3"),
                camundaTaskIds.get(2)));

    for (Pair<List<String>, String> variablesToTask : variablesToTaskList) {
      List<TaskSummary> kadaiTaskSummaryList =
          this.taskService.createTaskQuery().externalIdIn(variablesToTask.getRight()).list();
      assertThat(kadaiTaskSummaryList).hasSize(1);
      TaskSummary kadaiTaskSummary = kadaiTaskSummaryList.get(0);

      Task kadaiTask = taskService.getTask(kadaiTaskSummary.getId());
      assertThat(kadaiTask.getCustomAttributeMap().keySet())
          .containsExactlyInAnyOrderElementsOf(variablesToTask.getLeft());
    }

    this.camundaProcessengineRequester.completeTaskWithId(camundaTaskIds.get(2));
    camundaTaskIds =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);
    assertThat(camundaTaskIds).hasSize(3);
    Thread.sleep((long) (this.adapterTaskPollingInterval * 1.2));

    List<TaskSummary> kadaiTaskSummaryList =
        this.taskService.createTaskQuery().externalIdIn(camundaTaskIds.get(2)).list();
    assertThat(kadaiTaskSummaryList).hasSize(1);
    TaskSummary kadaiTaskSummary = kadaiTaskSummaryList.get(0);
    Task kadaiTask = taskService.getTask(kadaiTaskSummary.getId());
    assertThat(kadaiTask.getCustomAttributeMap().keySet())
        .containsExactlyInAnyOrderElementsOf(
            Arrays.asList("camunda:attribute1", "camunda:attribute2"));
  }

  @WithAccessId(
      user = "teamlead_1",
      groups = {"admin"})
  @Test
  void should_SetPlannedDateInKadaiTask_When_StartCamundaTaskWithFollowUpDate() throws Exception {
    final Instant now = Instant.now();
    String processInstanceId =
        this.camundaProcessengineRequester.startCamundaProcessAndReturnId(
            "simple_user_task_process_with_plannedDate", "");
    List<String> camundaTaskIds =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);

    Thread.sleep((long) (this.adapterCompletionPollingInterval * 1.2));

    // Make sure we only have one Camunda Task, so we don't need a for-loop
    assertThat(camundaTaskIds).hasSize(1);
    String camundaTaskId = camundaTaskIds.get(0);
    // retrieve and check kadaiTaskId
    List<TaskSummary> kadaiTaskSummaryList =
        this.taskService.createTaskQuery().externalIdIn(camundaTaskId).list();
    assertThat(kadaiTaskSummaryList).hasSize(1);
    String kadaiTaskExternalId = kadaiTaskSummaryList.get(0).getExternalId();
    assertThat(kadaiTaskExternalId).isEqualTo(camundaTaskId);
    String kadaiTaskId = kadaiTaskSummaryList.get(0).getId();
    Task kadaiTask = this.taskService.getTask(kadaiTaskId);
    // Check if followUp Date from Camunda task is equal to plannedDate from Kadai task
    Instant expectedDate = DateTimeUtil.parseDateTime("2015-06-26T09:54:00").toDate().toInstant();
    assertThat(kadaiTask.getPlanned()).isEqualTo(expectedDate);

    this.camundaProcessengineRequester.completeTaskWithId(camundaTaskId);
    camundaTaskIds =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);
    Thread.sleep((long) (this.adapterTaskPollingInterval * 1.2));

    // Make sure we only have one Camunda Task, so we don't need a for-loop
    assertThat(camundaTaskIds).hasSize(1);
    camundaTaskId = camundaTaskIds.get(0);
    kadaiTaskSummaryList = this.taskService.createTaskQuery().externalIdIn(camundaTaskId).list();
    assertThat(kadaiTaskSummaryList).hasSize(1);
    kadaiTaskExternalId = kadaiTaskSummaryList.get(0).getExternalId();
    assertThat(kadaiTaskExternalId).isEqualTo(camundaTaskId);
    kadaiTaskId = kadaiTaskSummaryList.get(0).getId();
    kadaiTask = this.taskService.getTask(kadaiTaskId);
    // Check if plannedDate was set to Instant.now during setTimestampsInKadaiTask() method call.
    // This is the desired behaviour since no followUpDate is set in this Camunda Task.
    assertThat(kadaiTask.getPlanned()).isAfter(now);
  }

  @WithAccessId(
      user = "teamlead_1",
      groups = {"taskadmin"})
  @TestFactory
  Stream<DynamicTest> should_CreateKadaiTask_When_StartCamundaTaskWithManualPriorityNull() {
    Stream<Pair<String, String>> input =
        Stream.of(
            Pair.of(
                "manual priority is empty",
                "\"variables\": {\"kadai.manual-priority\": {\"value\":\"\", "
                    + "\"type\":\"string\"}}"),
            Pair.of(
                "manual priority is null",
                "\"variables\": {\"kadai.manual-priority\": {\"value\":\"null\", "
                    + "\"type\":\"string\"}}"),
            Pair.of("manual priority does not exist", "\"variables\": {}"));

    ThrowingConsumer<Pair<String, String>> test =
        p -> {
          String variables = p.getRight();
          String processInstanceId =
              this.camundaProcessengineRequester.startCamundaProcessAndReturnId(
                  "simple_user_task_process", variables);
          List<String> camundaTaskIds =
              this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);

          Thread.sleep((long) (this.adapterCompletionPollingInterval * 1.2));

          // Make sure we only have one Camunda Task, so we don't need a for-loop
          assertThat(camundaTaskIds).hasSize(1);
          String camundaTaskId = camundaTaskIds.get(0);
          // retrieve and check kadaiTaskId
          List<TaskSummary> kadaiTaskSummaryList =
              this.taskService.createTaskQuery().externalIdIn(camundaTaskId).list();
          assertThat(kadaiTaskSummaryList).hasSize(1);
          String kadaiTaskExternalId = kadaiTaskSummaryList.get(0).getExternalId();
          assertThat(kadaiTaskExternalId).isEqualTo(camundaTaskId);
          String kadaiTaskId = kadaiTaskSummaryList.get(0).getId();
          Task kadaiTask = this.taskService.getTask(kadaiTaskId);
          assertThat(kadaiTask.getManualPriority()).isEqualTo(-1);
        };

    return DynamicTest.stream(input, Pair::getLeft, test);
  }

  private void setSystemConnector(String systemEngineIdentifier) {

    StringTokenizer systemConfigParts = new StringTokenizer(configuredSystemConnectorUrls, "|");
    CamundaSystemUrls.SystemUrlInfo systemUrlInfo = new CamundaSystemUrls.SystemUrlInfo();
    systemUrlInfo.setCamundaEngineIdentifier(systemEngineIdentifier);
    systemUrlInfo.setSystemRestUrl(systemConfigParts.nextToken().trim());
    systemUrlInfo.setSystemTaskEventUrl(systemConfigParts.nextToken().trim());

    SystemConnector systemConnector = new CamundaSystemConnectorImpl(systemUrlInfo);

    Map<String, SystemConnector> systemConnectors = adapterManager.getSystemConnectors();
    systemConnectors.clear();

    systemConnectors.put(systemUrlInfo.getSystemRestUrl(), systemConnector);
  }

  private Map<String, String> retrieveCustomAttributesFromNewKadaiTask(String camundaTaskId) {

    Map<String, String> customAttributes = new HashMap<>();
    try {

      List<TaskSummary> kadaiTasks =
          this.taskService.createTaskQuery().externalIdIn(camundaTaskId).list();
      assertThat(kadaiTasks).hasSize(1);
      TaskSummary kadaiTaskSummary = kadaiTasks.get(0);
      String kadaiTaskExternalId = kadaiTaskSummary.getExternalId();
      assertThat(kadaiTaskExternalId).isEqualTo(camundaTaskId);

      // get the actual task instead of summary to access custom attributes
      Task kadaiTask = this.taskService.getTask(kadaiTaskSummary.getId());

      customAttributes = kadaiTask.getCustomAttributeMap();
      return customAttributes;

    } catch (TaskNotFoundException | NotAuthorizedOnWorkbasketException e) {
      LOGGER.info(
          "Caught Exception while trying to retrieve custom attributes from new kadai task", e);
    }
    return customAttributes;
  }
}
