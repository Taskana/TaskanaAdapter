package pro.taskana.adapter.integration;

import static org.assertj.core.api.Assertions.assertThat;
import static org.awaitility.Awaitility.await;
import static org.awaitility.Durations.ONE_HUNDRED_MILLISECONDS;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.hasSize;
import static pro.taskana.utils.AwaitilityUtils.getDuration;
import static pro.taskana.utils.AwaitilityUtils.getTaskSummary;
import static pro.taskana.utils.ResourceUtils.getResourcesAsString;

import java.time.Instant;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;
import java.util.stream.Stream;
import org.camunda.bpm.engine.impl.calendar.DateTimeUtil;
import org.junit.jupiter.api.DynamicTest;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestFactory;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.jupiter.api.function.ThrowingConsumer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.test.context.ContextConfiguration;
import pro.taskana.adapter.manager.AdapterManager;
import pro.taskana.adapter.systemconnector.api.SystemConnector;
import pro.taskana.adapter.systemconnector.camunda.api.impl.CamundaSystemConnectorImpl;
import pro.taskana.adapter.systemconnector.camunda.config.CamundaSystemUrls.SystemUrlInfo;
import pro.taskana.adapter.test.TaskanaAdapterTestApplication;
import pro.taskana.common.internal.util.Pair;
import pro.taskana.common.test.security.JaasExtension;
import pro.taskana.common.test.security.WithAccessId;
import pro.taskana.task.api.TaskCustomIntField;
import pro.taskana.task.api.exceptions.TaskNotFoundException;
import pro.taskana.task.api.models.Task;
import pro.taskana.task.api.models.TaskSummary;
import pro.taskana.workbasket.api.exceptions.NotAuthorizedOnWorkbasketException;
import uk.co.datumedge.hamcrest.json.SameJSONAs;

/** Test class to test the conversion of tasks generated by Camunda BPM to Taskana tasks. */
@SpringBootTest(
    classes = TaskanaAdapterTestApplication.class,
    webEnvironment = WebEnvironment.DEFINED_PORT)
@AutoConfigureWebTestClient
@ExtendWith(JaasExtension.class)
@ContextConfiguration
@SuppressWarnings("checkstyle:LineLength")
class TestTaskAcquisition extends AbsIntegrationTest {

  private static final Logger LOGGER = LoggerFactory.getLogger(TestTaskAcquisition.class);
  @Autowired AdapterManager adapterManager;

  @Value("${taskana-system-connector-camundaSystemURLs}")
  private String configuredSystemConnectorUrls;

  @WithAccessId(
      user = "teamlead_1",
      groups = {"taskadmin"})
  @Test
  void should_CreateTaskanaTasksWithVariablesInCustomAttributes_When_StartCamundaTaskWithTheseComplexVariables() {

    String processInstanceId =
        this.camundaProcessengineRequester.startCamundaProcessAndReturnId(
            "simple_user_task_with_complex_variables_process", "");
    List<String> camundaTaskIds =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);

    String expectedComplexProcessVariable =
        getResourcesAsString(this.getClass(), "process-variable-camunda-attribute1.json");

    String expectedPrimitiveProcessVariable1 =
        getResourcesAsString(this.getClass(), "process-variable-camunda-attribute2.json");

    String expectedPrimitiveProcessVariable2 =
        getResourcesAsString(this.getClass(), "process-variable-camunda-attribute3.json");

    camundaTaskIds.forEach(
        camundaTaskId -> {
          Map<String, String> customAttributes =
              retrieveCustomAttributesFromNewTaskanaTask(camundaTaskId);

          assertThat(
              expectedComplexProcessVariable,
              SameJSONAs.sameJSONAs(customAttributes.get("camunda:attribute1")));
          assertThat(
              expectedPrimitiveProcessVariable1,
              SameJSONAs.sameJSONAs(customAttributes.get("camunda:attribute2")));
          assertThat(
              expectedPrimitiveProcessVariable2,
              SameJSONAs.sameJSONAs(customAttributes.get("camunda:attribute3")));
        });
  }

  @WithAccessId(
      user = "teamlead_1",
      groups = {"taskadmin"})
  @Test
  void should_CreateTaskanaTask_When_StartUserTaskProcessInstanceInCamunda() {

    String processInstanceId =
        this.camundaProcessengineRequester.startCamundaProcessAndReturnId(
            "simple_user_task_process", "");
    List<String> camundaTaskIds =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);

    camundaTaskIds.forEach(
        camundaTaskId -> {
          // retrieve and check taskanaTaskId
          TaskSummary taskanaTask = getTaskSummary(
              adapterTaskPollingInterval,
              () -> this.taskService.createTaskQuery().externalIdIn(camundaTaskId).list()
          );

          assertThat(camundaTaskId).isEqualTo(taskanaTask.getExternalId());
          assertThat(processInstanceId).isEqualTo(taskanaTask.getBusinessProcessId());
        });
  }

  @WithAccessId(
      user = "teamlead_1",
      groups = {"taskadmin"})
  @Test
  void should_CreateTaskanaTask_When_StartUserTaskProcessInstanceWithEmptyExtensionPropertyInCamunda() {

    String processInstanceId =
        this.camundaProcessengineRequester.startCamundaProcessAndReturnId(
            "simple_user_task_process_with_empty_extension_property", "");
    List<String> camundaTaskIds =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);

    camundaTaskIds.forEach(
        camundaTaskId -> {
          // retrieve and check taskanaTaskId
          TaskSummary taskanaTask = getTaskSummary(
              adapterTaskPollingInterval,
              () -> this.taskService.createTaskQuery().externalIdIn(camundaTaskId).list()
          );

          assertThat(camundaTaskId).isEqualTo(taskanaTask.getExternalId());
          assertThat(processInstanceId).isEqualTo(taskanaTask.getBusinessProcessId());
        });

    String expectedComplexProcessVariable =
        getResourcesAsString(this.getClass(), "process-variable-camunda-attribute1.json");

    String expectedPrimitiveProcessVariable1 =
        getResourcesAsString(this.getClass(), "process-variable-camunda-attribute2.json");

    String expectedPrimitiveProcessVariable2 =
        getResourcesAsString(this.getClass(), "process-variable-camunda-attribute3.json");

    camundaTaskIds.forEach(
        camundaTaskId -> {
          Map<String, String> customAttributes =
              retrieveCustomAttributesFromNewTaskanaTask(camundaTaskId);

          assertThat(
              expectedComplexProcessVariable,
              SameJSONAs.sameJSONAs(customAttributes.get("camunda:attribute1")));
          assertThat(
              expectedPrimitiveProcessVariable1,
              SameJSONAs.sameJSONAs(customAttributes.get("camunda:attribute2")));
          assertThat(
              expectedPrimitiveProcessVariable2,
              SameJSONAs.sameJSONAs(customAttributes.get("camunda:attribute3")));
        });
  }

  @WithAccessId(
      user = "teamlead_1",
      groups = {"taskadmin"})
  @Test
  void should_CreateMultipleTaskanaTasks_When_StartMultipleUserTaskProcessInstanceInCamunda() {

    int numberOfProcesses = 10;
    List<List<String>> camundaTaskIdsList = new ArrayList<>();
    for (int i = 0; i < numberOfProcesses; i++) {
      String processInstanceId =
          this.camundaProcessengineRequester.startCamundaProcessAndReturnId(
              "simple_user_task_process", "");
      camundaTaskIdsList.add(
          this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId));
    }

    camundaTaskIdsList.forEach(
        camundaTaskIds ->
            camundaTaskIds.forEach(
                camundaTaskId -> {
                  // retrieve and check taskanaTaskId
                  TaskSummary taskanaTask = getTaskSummary(
                      adapterTaskPollingInterval,
                      () -> this.taskService.createTaskQuery().externalIdIn(camundaTaskId).list()
                  );

                  assertThat(camundaTaskId).isEqualTo(taskanaTask.getExternalId());
                }));
  }

  @WithAccessId(
      user = "teamlead_1",
      groups = {"taskadmin"})
  @Test
  void should_CreateTaskanaTask_When_StartCamundaTaskWithPrimitiveVariables() {

    String variables =
        """
            "variables": {
              "amount": {
                "value":555,
                "type":"long"
              },
              "item": {
                "value": "item-xyz"
              }
            }""";
    String processInstanceId =
        this.camundaProcessengineRequester.startCamundaProcessAndReturnId(
            "simple_user_task_process", variables);
    List<String> camundaTaskIds =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);

    String expectedPrimitiveVariable1 =
        getResourcesAsString(this.getClass(), "process-variable-camunda-amount.json");

    String expectedPrimitiveVariable2 =
        getResourcesAsString(this.getClass(), "process-variable-camunda-item.json");

    camundaTaskIds.forEach(
        camundaTaskId -> {
          Map<String, String> customAttributes =
              retrieveCustomAttributesFromNewTaskanaTask(camundaTaskId);
          assertThat(
              expectedPrimitiveVariable1,
              SameJSONAs.sameJSONAs(customAttributes.get("camunda:amount")));
          assertThat(
              expectedPrimitiveVariable2,
              SameJSONAs.sameJSONAs(customAttributes.get("camunda:item")));
        });
  }

  @WithAccessId(
      user = "teamlead_1",
      groups = {"taskadmin"})
  @Test
  void should_CreateTaskanaTaskWithManualPriority_When_StartCamundaTaskWithThisManualPriority() {

    String variables =
        """
            "variables": {
              "taskana.manual-priority": {
                "value":"555",
                "type":"string"
              }
            }""";
    String processInstanceId =
        this.camundaProcessengineRequester.startCamundaProcessAndReturnId(
            "simple_user_task_process", variables);
    List<String> camundaTaskIds =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);

    camundaTaskIds.forEach(
        camundaTaskId -> {
          // retrieve and check taskanaTaskId
          TaskSummary taskanaTask = getTaskSummary(
              adapterTaskPollingInterval,
              () -> this.taskService.createTaskQuery().externalIdIn(camundaTaskId).list()
          );

          assertThat(camundaTaskId).isEqualTo(taskanaTask.getExternalId());
          assertThat(processInstanceId).isEqualTo(taskanaTask.getBusinessProcessId());
          assertThat(taskanaTask.getManualPriority()).isEqualTo(555);
        });
  }

  @WithAccessId(
      user = "teamlead_1",
      groups = {"taskadmin"})
  @Test
  void should_CreateTaskanaTaskWithDefaultManualPriority_When_StartCamundaTaskWithoutManualPriority() {

    String processInstanceId =
        this.camundaProcessengineRequester.startCamundaProcessAndReturnId(
            "simple_user_task_process", "");
    List<String> camundaTaskIds =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);

    camundaTaskIds.forEach(
        camundaTaskId -> {
          // retrieve and check taskanaTaskId
          TaskSummary taskanaTask = getTaskSummary(
              adapterTaskPollingInterval,
              () -> this.taskService.createTaskQuery().externalIdIn(camundaTaskId).list()
          );

          assertThat(camundaTaskId).isEqualTo(taskanaTask.getExternalId());
          assertThat(processInstanceId).isEqualTo(taskanaTask.getBusinessProcessId());
          assertThat(taskanaTask.getManualPriority()).isEqualTo(-1);
        });
  }

  @WithAccessId(
      user = "teamlead_1",
      groups = {"taskadmin"})
  @Test
  void should_SetCustomIntegersInTaskanaTask_When_CamundaTaskHasCustomIntegers() {
    String variables = getResourcesAsString(this.getClass(), "variables-custom-integer.txt");
    String processInstanceId =
        this.camundaProcessengineRequester.startCamundaProcessAndReturnId(
            "simple_user_task_process", variables);
    List<String> camundaTaskIds =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);

    camundaTaskIds.forEach(
        camundaTaskId -> {
          // retrieve and check taskanaTaskId
          TaskSummary taskanaTask = getTaskSummary(
              adapterTaskPollingInterval,
              () -> this.taskService.createTaskQuery().externalIdIn(camundaTaskId).list()
          );

          assertThat(camundaTaskId).isEqualTo(taskanaTask.getExternalId());
          assertThat(processInstanceId).isEqualTo(taskanaTask.getBusinessProcessId());
          assertThat(taskanaTask.getCustomIntField(TaskCustomIntField.CUSTOM_INT_1)).isOne();
          assertThat(taskanaTask.getCustomIntField(TaskCustomIntField.CUSTOM_INT_2)).isEqualTo(2);
          assertThat(taskanaTask.getCustomIntField(TaskCustomIntField.CUSTOM_INT_3)).isEqualTo(3);
          assertThat(taskanaTask.getCustomIntField(TaskCustomIntField.CUSTOM_INT_4)).isEqualTo(4);
          assertThat(taskanaTask.getCustomIntField(TaskCustomIntField.CUSTOM_INT_5)).isEqualTo(5);
          assertThat(taskanaTask.getCustomIntField(TaskCustomIntField.CUSTOM_INT_6)).isEqualTo(6);
          assertThat(taskanaTask.getCustomIntField(TaskCustomIntField.CUSTOM_INT_7)).isEqualTo(7);
          assertThat(taskanaTask.getCustomIntField(TaskCustomIntField.CUSTOM_INT_8)).isEqualTo(8);
        });
  }

  @WithAccessId(
      user = "teamlead_1",
      groups = {"taskadmin"})
  @Test
  void should_SetDefaultCustomIntegerInTaskanaTask_When_CamundaTaskHasDefaultCustomInteger() {

    String processInstanceId =
        this.camundaProcessengineRequester.startCamundaProcessAndReturnId(
            "simple_user_task_process", "");
    List<String> camundaTaskIds =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);

    camundaTaskIds.forEach(
        camundaTaskId -> {
          // retrieve and check taskanaTaskId
          TaskSummary taskanaTask = getTaskSummary(
              adapterTaskPollingInterval,
              () -> this.taskService.createTaskQuery().externalIdIn(camundaTaskId).list()
          );

          assertThat(camundaTaskId).isEqualTo(taskanaTask.getExternalId());
          assertThat(processInstanceId).isEqualTo(taskanaTask.getBusinessProcessId());
          assertThat(taskanaTask.getCustomIntField(TaskCustomIntField.CUSTOM_INT_1)).isNull();
          assertThat(taskanaTask.getCustomIntField(TaskCustomIntField.CUSTOM_INT_2)).isNull();
          assertThat(taskanaTask.getCustomIntField(TaskCustomIntField.CUSTOM_INT_3)).isNull();
          assertThat(taskanaTask.getCustomIntField(TaskCustomIntField.CUSTOM_INT_4)).isNull();
          assertThat(taskanaTask.getCustomIntField(TaskCustomIntField.CUSTOM_INT_5)).isNull();
          assertThat(taskanaTask.getCustomIntField(TaskCustomIntField.CUSTOM_INT_6)).isNull();
          assertThat(taskanaTask.getCustomIntField(TaskCustomIntField.CUSTOM_INT_7)).isNull();
          assertThat(taskanaTask.getCustomIntField(TaskCustomIntField.CUSTOM_INT_8)).isNull();
        });
  }

  @WithAccessId(
      user = "teamlead_1",
      groups = {"taskadmin"})
  @Test
  void should_CreateTaskanaTaskWithComplexVariablesInCustomAttributes_When_StartCamundaTaskWithTheseVariables()
      throws Exception {

    String processInstanceId =
        this.camundaProcessengineRequester.startCamundaProcessAndReturnId(
            "simple_user_task_with_big_complex_variables_process", "");

    String camundaTaskId =
        this.camundaProcessengineRequester
            .getTaskIdsFromProcessInstanceId(processInstanceId)
            .get(0);

    // retrieve and check taskanaTaskId
    TaskSummary taskanaTaskSummary = getTaskSummary(
        adapterTaskPollingInterval,
        () -> this.taskService.createTaskQuery().externalIdIn(camundaTaskId).list()
    );

    assertThat(camundaTaskId).isEqualTo(taskanaTaskSummary.getExternalId());

    Task taskanaTask = this.taskService.getTask(taskanaTaskSummary.getId());
    Map<String, String> taskanaTaskCustomAttributes = taskanaTask.getCustomAttributeMap();
    String variablesKeyString = "camunda:attribute1";
    String taskanaVariablesString = taskanaTaskCustomAttributes.get(variablesKeyString);

    assertThat(taskanaVariablesString).hasSizeGreaterThan(1_500_000);
  }

  @WithAccessId(
      user = "teamlead_1",
      groups = {"taskadmin"})
  @Test
  void should_CreateTaskanaTasksWithComplexVariablesInCustomAttributes_When_ParentExecutionOfCamundaTasksStarted() {

    String processInstanceId =
        this.camundaProcessengineRequester.startCamundaProcessAndReturnId(
            "simple_multiple_user_tasks_with_complex_variables_process", "");

    List<String> camundaTaskIds =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);

    assertThat(camundaTaskIds).hasSize(3);

    camundaTaskIds.forEach(
        camundaTaskId -> {
          // retrieve and check taskanaTaskId
          TaskSummary taskanaTask = getTaskSummary(
              adapterTaskPollingInterval,
              () -> this.taskService.createTaskQuery().externalIdIn(camundaTaskId).list()
          );

          assertThat(camundaTaskId).isEqualTo(taskanaTask.getExternalId());
          assertThat(processInstanceId).isEqualTo(taskanaTask.getBusinessProcessId());

          // complete first 3 parallel tasks, one of which starts another task after completion that
          // will be checked for the process variables
          this.camundaProcessengineRequester.completeTaskWithId(camundaTaskId);
        });

    camundaTaskIds =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);

    assertThat(camundaTaskIds).hasSize(1);

    String expectedComplexProcessVariable =
        getResourcesAsString(this.getClass(), "process-variable-camunda-attribute1.json");

    String expectedPrimitiveProcessVariable1 =
        getResourcesAsString(this.getClass(), "process-variable-camunda-attribute2.json");

    String expectedPrimitiveProcessVariable2 =
        getResourcesAsString(this.getClass(), "process-variable-camunda-attribute3.json");

    camundaTaskIds.forEach(
        camundaTaskId -> {
          Map<String, String> customAttributes =
              retrieveCustomAttributesFromNewTaskanaTask(camundaTaskId);

          assertThat(
              expectedComplexProcessVariable,
              SameJSONAs.sameJSONAs(customAttributes.get("camunda:attribute1")));
          assertThat(
              expectedPrimitiveProcessVariable1,
              SameJSONAs.sameJSONAs(customAttributes.get("camunda:attribute2")));
          assertThat(
              expectedPrimitiveProcessVariable2,
              SameJSONAs.sameJSONAs(customAttributes.get("camunda:attribute3")));
        });
  }

  @WithAccessId(
      user = "teamlead_1",
      groups = {"taskadmin"})
  @Test
  void should_CreateMultipleTaskanaTasks_When_StartProcessInstanceWithMultipleExecutionsInCamunda() {

    String processInstanceId =
        this.camundaProcessengineRequester.startCamundaProcessAndReturnId(
            "simple_multiple_execution_process", "");
    List<String> camundaTaskIds =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);
    assertThat(camundaTaskIds).hasSize(3);

    camundaTaskIds.forEach(
        camundaTaskId -> {
          // retrieve and check taskanaTaskId
          TaskSummary taskanaTask = getTaskSummary(
              adapterTaskPollingInterval,
              () -> this.taskService.createTaskQuery().externalIdIn(camundaTaskId).list()
          );

          assertThat(camundaTaskId).isEqualTo(taskanaTask.getExternalId());
          assertThat(processInstanceId).isEqualTo(taskanaTask.getBusinessProcessId());
        });
  }

  @WithAccessId(
      user = "teamlead_1",
      groups = {"taskadmin"})
  @Test
  void should_CreateTaskanaTask_When_SystemConnectorHasCorrectSystemEngineIdentifier() {

    final Map<String, SystemConnector> originalSystemConnectors =
        new HashMap<>(adapterManager.getSystemConnectors());

    setSystemConnector("default");

    String processInstanceId =
        this.camundaProcessengineRequester.startCamundaProcessAndReturnId(
            "simple_user_task_process", "");
    List<String> camundaTaskIds =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);

    camundaTaskIds.forEach(
        camundaTaskId -> {
          // retrieve and check taskanaTaskId
          TaskSummary taskanaTask = getTaskSummary(
              adapterTaskPollingInterval,
              () -> this.taskService.createTaskQuery().externalIdIn(camundaTaskId).list()
          );

          assertThat(camundaTaskId).isEqualTo(taskanaTask.getExternalId());
          assertThat(processInstanceId).isEqualTo(taskanaTask.getBusinessProcessId());
        });

    adapterManager.getSystemConnectors().clear();
    adapterManager.getSystemConnectors().putAll(originalSystemConnectors);
  }

  @WithAccessId(
      user = "teamlead_1",
      groups = {"taskadmin"})
  @Test
  void should_CreateTaskanaTasksWithCorrectDomains_When_StartProcessWithDomainsInProcessVariables()
      throws Exception {
    String processInstanceId =
        this.camundaProcessengineRequester.startCamundaProcessAndReturnId(
            "simple_user_task_process_with_different_domains",
            getResourcesAsString(this.getClass(), "variables-taskana-domain.txt"));
    List<String> camundaTaskIds =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);
    assertThat(camundaTaskIds).hasSize(3);

    List<Pair<String, String>> variablesToTaskList =
        Arrays.asList(
            Pair.of("DOMAIN_B", camundaTaskIds.get(0)),
            Pair.of("DOMAIN_B", camundaTaskIds.get(1)),
            Pair.of("DOMAIN_B", camundaTaskIds.get(2)));

    for (Pair<String, String> variablesToTask : variablesToTaskList) {
      TaskSummary taskanaTaskSummary = getTaskSummary(
          adapterTaskPollingInterval,
          () -> this.taskService.createTaskQuery().externalIdIn(variablesToTask.getRight()).list()
      );

      Task taskanaTask = taskService.getTask(taskanaTaskSummary.getId());
      assertThat(taskanaTask.getDomain()).isEqualTo(variablesToTask.getLeft());
    }

    this.camundaProcessengineRequester.completeTaskWithId(camundaTaskIds.get(2));
    List<String> camundaTaskIds2 =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);
    assertThat(camundaTaskIds2).hasSize(3);

    TaskSummary taskanaTaskSummary = getTaskSummary(
        adapterTaskPollingInterval,
        () -> this.taskService.createTaskQuery().externalIdIn(camundaTaskIds2.get(2)).list()
    );

    Task taskanaTask = taskService.getTask(taskanaTaskSummary.getId());
    assertThat(taskanaTask.getDomain()).isEqualTo("DOMAIN_B");
  }

  @WithAccessId(
      user = "teamlead_1",
      groups = {"taskadmin"})
  @Test
  void should_CreateTaskanaTasksWithCorrectDomains_When_StartProcessWithDomainsInExtensionProperties()
      throws Exception {

    String processInstanceId =
        this.camundaProcessengineRequester.startCamundaProcessAndReturnId(
            "simple_user_task_process_with_different_domains", "");
    List<String> camundaTaskIds =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);
    assertThat(camundaTaskIds).hasSize(3);

    List<Pair<String, String>> variablesToTaskList =
        Arrays.asList(
            Pair.of("DOMAIN_A", camundaTaskIds.get(0)),
            Pair.of("DOMAIN_A", camundaTaskIds.get(1)),
            Pair.of("DOMAIN_B", camundaTaskIds.get(2)));

    for (Pair<String, String> variablesToTask : variablesToTaskList) {
      TaskSummary taskanaTaskSummary = getTaskSummary(
          adapterTaskPollingInterval,
          () -> this.taskService.createTaskQuery().externalIdIn(variablesToTask.getRight()).list()
      );
      Task taskanaTask = taskService.getTask(taskanaTaskSummary.getId());
      assertThat(taskanaTask.getDomain()).isEqualTo(variablesToTask.getLeft());
    }

    this.camundaProcessengineRequester.completeTaskWithId(camundaTaskIds.get(2));
    List<String> camundaTaskIds2 =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);
    assertThat(camundaTaskIds2).hasSize(3);

    TaskSummary taskanaTaskSummary = getTaskSummary(
        adapterTaskPollingInterval,
        () -> this.taskService.createTaskQuery().externalIdIn(camundaTaskIds2.get(2)).list()
    );

    Task taskanaTask = taskService.getTask(taskanaTaskSummary.getId());
    assertThat(taskanaTask.getDomain()).isEqualTo("DOMAIN_A");
  }

  @WithAccessId(
      user = "teamlead_1",
      groups = {"taskadmin"})
  @Test
  void should_NotCreateTaskanaTask_When_SystemConnectorHasIncorrectSystemEngineIdentifier() {

    final Map<String, SystemConnector> originalSystemConnectors =
        new HashMap<>(adapterManager.getSystemConnectors());

    setSystemConnector("wrongIdentifier");

    assertThat(taskanaOutboxRequester.getAllEvents()).isEmpty();

    String processInstanceId =
        this.camundaProcessengineRequester.startCamundaProcessAndReturnId(
            "simple_user_task_process", "");
    List<String> camundaTaskIds =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);

    assertThat(taskanaOutboxRequester.getAllEvents()).hasSize(1);

    camundaTaskIds.forEach(
        camundaTaskId -> {
          await()
              .with()
              .pollInterval(ONE_HUNDRED_MILLISECONDS)
              .pollDelay(getDuration(adapterTaskPollingInterval))
              .until(
                  () -> this.taskService.createTaskQuery().externalIdIn(camundaTaskId).list(),
                  hasSize(0));
        });

    assertThat(taskanaOutboxRequester.getAllEvents()).hasSize(1);

    adapterManager.getSystemConnectors().clear();
    adapterManager.getSystemConnectors().putAll(originalSystemConnectors);
  }

  @WithAccessId(
      user = "teamlead_1",
      groups = {"taskadmin"})
  @Test
  void should_CreateTaskanaTasksWithVariablesInCustomAttributes_When_StartProcessWithTheseDifferentVariablesInCamunda()
      throws Exception {

    String processInstanceId =
        this.camundaProcessengineRequester.startCamundaProcessAndReturnId(
            "simple_user_task_process_with_multiple_tasks_and_complex_variables", "");
    List<String> camundaTaskIds =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);
    assertThat(camundaTaskIds).hasSize(3);

    List<Pair<List<String>, String>> variablesToTaskList =
        Arrays.asList(
            Pair.of(Collections.singletonList("camunda:attribute1"), camundaTaskIds.get(0)),
            Pair.of(
                Arrays.asList("camunda:attribute1", "camunda:attribute2"), camundaTaskIds.get(1)),
            Pair.of(
                Arrays.asList("camunda:attribute1", "camunda:attribute2", "camunda:attribute3"),
                camundaTaskIds.get(2)));

    for (Pair<List<String>, String> variablesToTask : variablesToTaskList) {

      TaskSummary taskanaTaskSummary = getTaskSummary(
          adapterTaskPollingInterval,
          () -> this.taskService.createTaskQuery().externalIdIn(variablesToTask.getRight()).list()
      );

      Task taskanaTask = taskService.getTask(taskanaTaskSummary.getId());
      assertThat(taskanaTask.getCustomAttributeMap().keySet())
          .containsExactlyInAnyOrderElementsOf(variablesToTask.getLeft());
    }

    this.camundaProcessengineRequester.completeTaskWithId(camundaTaskIds.get(2));
    List<String> camundaTaskIds2 =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);
    assertThat(camundaTaskIds).hasSize(3);

    TaskSummary taskanaTaskSummary = getTaskSummary(
        adapterTaskPollingInterval,
        () -> this.taskService.createTaskQuery().externalIdIn(camundaTaskIds2.get(2)).list()
    );

    Task taskanaTask = taskService.getTask(taskanaTaskSummary.getId());
    assertThat(taskanaTask.getCustomAttributeMap().keySet())
        .containsExactlyInAnyOrderElementsOf(
            Arrays.asList("camunda:attribute1", "camunda:attribute2"));
  }

  @WithAccessId(
      user = "teamlead_1",
      groups = {"admin"})
  @Test
  void should_SetPlannedDateInTaskanaTask_When_StartCamundaTaskWithFollowUpDate() throws Exception {
    final Instant now = Instant.now();
    String processInstanceId =
        this.camundaProcessengineRequester.startCamundaProcessAndReturnId(
            "simple_user_task_process_with_plannedDate", "");
    List<String> camundaTaskIds =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);
    // Make sure we only have one Camunda Task, so we don't need a for-loop
    assertThat(camundaTaskIds).hasSize(1);
    String camundaTaskId = camundaTaskIds.get(0);

    // retrieve and check taskanaTaskId
    TaskSummary taskanaTaskSummary = getTaskSummary(
        adapterTaskPollingInterval,
        () -> this.taskService.createTaskQuery().externalIdIn(camundaTaskId).list()
    );
    assertThat(taskanaTaskSummary.getExternalId()).isEqualTo(camundaTaskId);
    Task taskanaTask = taskService.getTask(taskanaTaskSummary.getId());

    // Check if followUp Date from Camunda task is equal to plannedDate from Taskana task
    Instant expectedDate = DateTimeUtil.parseDateTime("2015-06-26T09:54:00").toDate().toInstant();
    assertThat(taskanaTask.getPlanned()).isEqualTo(expectedDate);

    this.camundaProcessengineRequester.completeTaskWithId(camundaTaskId);
    List<String> camundaTaskIds2 =
        this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);
    // Make sure we only have one Camunda Task, so we don't need a for-loop
    assertThat(camundaTaskIds2).hasSize(1);
    String camundaTaskId2 = camundaTaskIds2.get(0);
    TaskSummary taskanaTaskSummary2 = getTaskSummary(
        adapterTaskPollingInterval,
        () -> this.taskService.createTaskQuery().externalIdIn(camundaTaskId2).list()
    );
    assertThat(taskanaTaskSummary2.getExternalId()).isEqualTo(camundaTaskId2);
    taskanaTask = this.taskService.getTask(taskanaTaskSummary2.getId());
    // Check if plannedDate was set to Instant.now during setTimestampsInTaskanaTask() method call.
    // This is the desired behaviour since no followUpDate is set in this Camunda Task.
    assertThat(taskanaTask.getPlanned()).isAfter(now);
  }

  @WithAccessId(
      user = "teamlead_1",
      groups = {"taskadmin"})
  @TestFactory
  Stream<DynamicTest> should_CreateTaskanaTask_When_StartCamundaTaskWithManualPriorityNull() {
    Stream<Pair<String, String>> input =
        Stream.of(
            Pair.of(
                "manual priority is empty",
                getResourcesAsString(this.getClass(), "variables-manual-priority-is-empty.txt")),
            Pair.of(
                "manual priority is null",
                getResourcesAsString(this.getClass(), "variables-manual-priority-is-null.txt")),
            Pair.of(
                "manual priority does not exist",
                getResourcesAsString(
                    this.getClass(), "variables-manual-priority-does-not-exists.txt")));

    ThrowingConsumer<Pair<String, String>> test =
        p -> {
          String variables = p.getRight();
          String processInstanceId =
              this.camundaProcessengineRequester.startCamundaProcessAndReturnId(
                  "simple_user_task_process", variables);
          List<String> camundaTaskIds =
              this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId);

          // Make sure we only have one Camunda Task, so we don't need a for-loop
          assertThat(camundaTaskIds).hasSize(1);
          String camundaTaskId = camundaTaskIds.get(0);

          // retrieve and check taskanaTaskId
          TaskSummary taskanaTaskSummary = getTaskSummary(
              adapterTaskPollingInterval,
              () -> this.taskService.createTaskQuery().externalIdIn(camundaTaskId).list()
          );
          assertThat(taskanaTaskSummary.getExternalId()).isEqualTo(camundaTaskId);
          Task taskanaTask = taskService.getTask(taskanaTaskSummary.getId());
          assertThat(taskanaTask.getManualPriority()).isEqualTo(-1);
        };

    return DynamicTest.stream(input, Pair::getLeft, test);
  }

  private void setSystemConnector(String systemEngineIdentifier) {

    StringTokenizer systemConfigParts = new StringTokenizer(configuredSystemConnectorUrls, "|");
    SystemUrlInfo systemUrlInfo = new SystemUrlInfo();
    systemUrlInfo.setCamundaEngineIdentifier(systemEngineIdentifier);
    systemUrlInfo.setSystemRestUrl(systemConfigParts.nextToken().trim());
    systemUrlInfo.setSystemTaskEventUrl(systemConfigParts.nextToken().trim());

    SystemConnector systemConnector = new CamundaSystemConnectorImpl(systemUrlInfo);

    Map<String, SystemConnector> systemConnectors = adapterManager.getSystemConnectors();
    systemConnectors.clear();

    systemConnectors.put(systemUrlInfo.getSystemRestUrl(), systemConnector);
  }

  private Map<String, String> retrieveCustomAttributesFromNewTaskanaTask(String camundaTaskId) {

    Map<String, String> customAttributes = new HashMap<>();
    try {

      // retrieve and check taskanaTaskId
      TaskSummary taskanaTaskSummary = getTaskSummary(
          adapterTaskPollingInterval,
          () -> this.taskService.createTaskQuery().externalIdIn(camundaTaskId).list()
      );

      assertThat(taskanaTaskSummary.getExternalId()).isEqualTo(camundaTaskId);

      // get the actual task instead of summary to access custom attributes
      Task taskanaTask = this.taskService.getTask(taskanaTaskSummary.getId());

      customAttributes = taskanaTask.getCustomAttributeMap();
      return customAttributes;

    } catch (TaskNotFoundException | NotAuthorizedOnWorkbasketException e) {
      LOGGER.info(
          "Caught Exception while trying to retrieve custom attributes from new taskana task", e);
    }
    return customAttributes;
  }
}
