<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>taskana-adapter-parent</artifactId>
        <groupId>pro.taskana</groupId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>taskana-adapter-tasklistener-example</artifactId>

    <packaging>war</packaging>

    <name>Camunda BPM Process Application</name>
    <description>A Process Application for [Camunda BPM](http://docs.camunda.org). [The project has been generated by the Maven archetype 'camunda-archetype-ejb-war-7.11.1']</description>

    <properties>
        <camunda.version>7.11.0</camunda.version>
        <!--
        Adjust if you want to use Camunda Enterprise Edition (EE):
        <camunda.version>7.11.0-ee</camunda.version>
        Make sure you also switch to EE repository below
        -->
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <failOnMissingWebXml>false</failOnMissingWebXml>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.camunda.bpm</groupId>
                <artifactId>camunda-bom</artifactId>
                <version>${camunda.version}</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>

        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>javax.ws.rs-api</artifactId>
            <version>2.1.1</version>
        </dependency>
        <!-- Jersey 2.19 -->
        <dependency>
            <groupId>pro.taskana</groupId>
            <artifactId>taskana-adapter-camunda-tasklistener</artifactId>
            <version>0.0.1-SNAPSHOT</version>
        </dependency>
        <dependency>
            <!-- process engine, needs to be 'provided' because it's already a shared library in the container -->
            <groupId>org.camunda.bpm</groupId>
            <artifactId>camunda-engine</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <!-- client for Java EE application server integration, included in WAR as an alternative to write your own ProcessApplication class -->
            <groupId>org.camunda.bpm.javaee</groupId>
            <artifactId>camunda-ejb-client</artifactId>
        </dependency>
        <dependency>
            <!-- CDI integration, needs to be included in WAR, otherwise CDI can not work correctly -->
            <groupId>org.camunda.bpm</groupId>
            <artifactId>camunda-engine-cdi</artifactId>
        </dependency>

        <dependency>
            <!-- AssertJ Testing Library -->
            <groupId>org.camunda.bpm.extension</groupId>
            <artifactId>camunda-bpm-assert</artifactId>
            <version>1.2</version>
            <scope>test</scope>
        </dependency>

        <!-- Required to use Spin dataformat support in unit tests -->
        <dependency>
            <groupId>org.camunda.spin</groupId>
            <artifactId>camunda-spin-dataformat-all</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.camunda.bpm</groupId>
            <artifactId>camunda-engine-plugin-spin</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Required to use Templates in unit tests -->
        <dependency>
            <groupId>org.camunda.template-engines</groupId>
            <artifactId>camunda-template-engines-freemarker</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.camunda.template-engines</groupId>
            <artifactId>camunda-template-engines-velocity</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <!-- Bootstrap for styling via Webjars project -->
            <groupId>org.webjars</groupId>
            <artifactId>bootstrap</artifactId>
            <version>2.3.2</version>
        </dependency>

        <!-- Java EE 6 APIs
        <dependency>
          <groupId>javax</groupId>
          <artifactId>javaee-api</artifactId>
          <version>6.0</version>
          <scope>provided</scope>
        </dependency>
        Note that we cannot use the javax.javaee-api if running Arquillian, see
        https://developer.jboss.org/wiki/WhatsTheCauseOfThisExceptionJavalangClassFormatErrorAbsentCode
        for the reasons why.
        -->
        <dependency>
            <groupId>org.jboss.spec</groupId>
            <artifactId>jboss-javaee-6.0</artifactId>
            <version>1.0.0.Final</version>
            <type>pom</type>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <!-- Needed for InMemoryH2Test -->
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>1.4.197</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <!-- Used to generate test coverage reports, see https://github.com/camunda/camunda-consulting/tree/master/snippets/camunda-bpm-process-test-coverage -->
            <groupId>org.camunda.bpm.extension</groupId>
            <artifactId>camunda-bpm-process-test-coverage</artifactId>
            <version>0.3.2</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <!-- use logback as logger -->
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.1.3</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <!-- apache commons logging => slf4j -->
            <artifactId>jcl-over-slf4j</artifactId>
            <version>1.7.25</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.4.5</version>
        </dependency>

        <dependency>
            <!--  java util logging => slf4j -->
            <groupId>org.slf4j</groupId>
            <artifactId>jul-to-slf4j</artifactId>
            <version>1.7.25</version>
            <scope>test</scope>
        </dependency>

        <!-- Add your own dependencies here, if in compile scope, they are added to the war -->

    </dependencies>

    <repositories>
        <repository>
            <id>camunda-bpm-nexus</id>
            <name>Camunda Maven Repository</name>
            <url>https://app.camunda.com/nexus/content/groups/public</url>
        </repository>
        <!-- enable this for EE dependencies (requires credentials in ~/.m2/settings.xml)
        <repository>
          <id>camunda-bpm-nexus-ee</id>
          <name>Camunda Enterprise Maven Repository</name>
          <url>https://app.camunda.com/nexus/content/repositories/camunda-bpm-ee</url>
        </repository>
        -->
        <repository>
            <id>jboss-public-repository</id>
            <name>JBoss Repository</name>
            <url>http://repository.jboss.org/nexus/content/groups/public</url>
        </repository>
    </repositories>

    <build>
        <finalName>${project.artifactId}</finalName>
        <plugins>
            <plugin>
                <!-- Deploy to JBoss AS7: mvn clean jboss-as:deploy See also: https://docs.jboss.org/jbossas/7/plugins/maven/latest/examples/deployment-example.html -->
                <groupId>org.jboss.as.plugins</groupId>
                <artifactId>jboss-as-maven-plugin</artifactId>
                <version>7.9.Final</version>
            </plugin>
            <plugin>
                <!-- Deploy to Wildfly: mvn clean wildfly:deploy See also: https://docs.jboss.org/wildfly/plugins/maven/latest/examples/deployment-example.html -->
                <groupId>org.wildfly.plugins</groupId>
                <artifactId>wildfly-maven-plugin</artifactId>
                <version>1.2.1.Final</version>
            </plugin>
            <plugin>
                <!-- Deploy to JBoss using: mvn clean package antrun:run
                     Follow the instructions in build.properties.example to make it work!-->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <configuration>
                    <tasks>
                        <ant antfile="${basedir}/build.xml">
                            <target name="copy.war.into.jboss" />
                        </ant>
                    </tasks>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>default</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                    </plugin>
                </plugins>
            </build>
        </profile>

    </profiles>


</project>